Написать автотесты на метод RenewToken application, для предусловий использовать методы Create application, GetToken.
# Описание задания
# Написать smoke и regress автотесты на pytest.ini из методов API из списка выше с использованием helpers
# и clients, и файл.env.test + config.py, для реализации и примера написания автотестов можно использовать примеры
# типовых проектов на wiki.
# Для тестов на GW, можно спользовать переменную окружения с готовыми token_keycloak или
# token_application.
# В автотестах необходимо учитывать то, что проверяемые сущности сначала нужно будет создать, например: Создать
# приложение, для  того чтобы проверить информациюо нем.
#
# Можно использовать один из двух вариантов написания, например:
# pytest.ini. Тест на создание сущности метод post, и постпроверку того, что
# она создалась методом get, в рамках одного теста
# 2. Предусловие: создать сущность методом post, и тест проверку
# того, что  она создалась методом  get, в рамках одного теста
#
# Автотест  должен содержать проверки:
# pytest.ini. Схемы ответа метода
# 2. Содержимого ответа метода
# Автотесты должны покрывать тесты:
# pytest.ini. Позитивные(Статус 200)
# 2. Негативные(Статус 40Х)
#
# Автотесты  могут
# проверять:
# pytest.ini.Различныевходныеданныеилиповедениеприихотсутствии2.
# Обязательность
# полей
# 3.
# Валидацию
# полей(длина
# поля, граничные
# значения, некорректные
# символы
# и
# д.р.)
#
# clients - папка с клиентами
# __init__.py
# <service>_client.py - файл клиента методов тестируемого сервиса
# keycloak_client.py - файл клиента для подключения к keyсloak для получения token
# decorators - папка с декораторами
# __init__.py
# decorator_log_http_request.py - декоратор проверяющий что сервис не отдает нам статус 500
# helpers - папка помощник, с файлами:
# __init__.py
# base_helper.py - часто-вызываемые функции для тестирования или обработки данных
# error_text.py - файл с текстами ошибок методов
# generate_data.py - файл помощник для генерации тестовых данных
# schema_methods.py - файл со схемами ответов для каждого метода
# <service>_helper.py - часто-вызываемые функции для тестирования данного сервиса
# tests
# __init__.py
# test_<api_methods_1>.py - файл с тестами для метода <api_methods_1>
# test_<api_methods_2>.py - файл с тестами для метода <api_methods_1>
# requirements.txt - файл с зависимостями проекта
# pytest.ini - конфигурационный файл с настройками поведения pytest, тут лежит описание маркировки
# conftest.py - файл хранения фикстур и настроек тестов.
# config.py - файл инициализации переменных из .env.<zone>
# .gitignore - файл хранит с список файлов которые не нужно заливать в git
# .flake8 - файл хранит настройки flake8 и список файлов которые не нужно проверять
# .env.<zone> - файл хранить конфигурационные данные (хосты, авторизацию и т.д.)